'use client';

import { usePDF } from '@react-pdf/renderer';
import { Button } from '@/components/ui/button';
import { Download, Loader2 } from 'lucide-react';
import { InvoicePDFDocument } from './invoice-pdf-document';
import type { Invoice, Customer, Consignatario } from '@/lib/types';
import { useEffect } from 'react';

type InvoiceDownloadButtonProps = {
  invoice: Invoice;
  customer: Customer;
  consignatario: Consignatario | null;
};

// This component uses the usePDF hook to generate the PDF blob on the client-side.
export function InvoiceDownloadButton({ invoice, customer, consignatario }: InvoiceDownloadButtonProps) {
  const [instance, updateInstance] = usePDF({
    document: <InvoicePDFDocument invoice={invoice} customer={customer} consignatario={consignatario} />,
  });

  // Re-generate the document if the data changes.
  useEffect(() => {
    updateInstance();
  }, [invoice, customer, consignatario, updateInstance]);

  const handleDownload = () => {
    if (instance.loading || !instance.url) return;
    
    // Create a link and trigger the download, as per the user's example.
    const link = document.createElement('a');
    link.href = instance.url; // This is a blob URL generated by usePDF
    link.download = `Invoice-${invoice.invoiceNumber}.pdf`;
    document.body.appendChild(link);
    link.click();
    
    // Clean up by removing the link.
    document.body.removeChild(link);
  };
  
  const isLoading = instance.loading;

  return (
    <Button onClick={handleDownload} disabled={isLoading}>
      {isLoading ? (
        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
      ) : (
        <Download className="mr-2 h-4 w-4" />
      )}
      {isLoading ? 'Generando PDF...' : 'Descargar PDF'}
    </Button>
  );
}
